scalar Map
scalar Time
scalar Timestamp
scalar Duration
scalar FilePath

type Elk {
    version: String!
    env: Map
    envFile: String!
    vars: Map
    tasks: [Task!]!
}

type Task {
    name: String!
    cmds: [String]!
    env: Map
    vars: Map
    envFile: String!
    description: String!
    dir: String!
    log: Log
    sources: String
    deps: [Dep]!
    ignoreError: Boolean!
}

type Dep {
    name: String!
    detached: Boolean!
}

type Log {
    out: String!
    format: String!
    error: String!
}

type DetachedTask {
    id: ID!
    tasks: [Task!]!
    outputs: [Output!]
    status: String!
    startAt: Time!
    # Amount of time that taked to complete the detached task
    duration: Duration!
    endAt: Time
}

type Query {
    elk: Elk!
    tasks(name: String): [Task!]!
    detached(id: ID): [DetachedTask!]!
}

input TaskProperties {
    vars: Map
    env: Map
    envFile: FilePath!
    ignoreError: Boolean
}

input RunConfig {
    start: Timestamp
    deadline: Timestamp
    timeout: Duration
    delay: Duration
}

type Mutation {
    run(tasks: [String!]!, properties: TaskProperties): [Output]
    detached(tasks: [String!]!, properties: TaskProperties, config: RunConfig): DetachedTask
    kill(id: ID!): DetachedTask
}

type Output {
    task: String!
    out: [String!]!
    error: [String!]!
}